{"version":3,"sources":["components/UploadProgress/UploadProgress.module.css","redux/uploadFile/uploadFile.types.js","redux/uploadFile/uploadFile.actions.js","components/UploadItem/UploadItem.js","components/UploadProgress/UploadProgress.js","components/header.js","components/footer.js","App.js","serviceWorker.js","redux/uploadFile/uploadFile.utils.js","redux/uploadFile/uploadFile.reducer.js","redux/root-reducer.js","index.js","components/UploadItem/UploadItem.module.css"],"names":["module","exports","uploadFileTypes","SET_UPLOAD_FILE","SET_UPLOAD_PROGRESS","SUCCESS_UPLOAD_FILE","FAILURE_UPLOAD_FILE","setUploadProgress","id","progress","type","payload","failureUploadFile","UploadItem","props","file","className","Styles","wrapperItem","leftSide","progressBar","style","width","name","percentage","connect","state","fileProgress","UploadFile","dispatch","uploadFile","files","length","forEach","a","formPayload","FormData","append","axios","baseURL","url","method","data","onUploadProgress","loaded","total","percentageProgress","Math","floor","uploadedFileAmount","size","useEffect","fileToUpload","toArray","filter","wrapper","map","key","Header","Footer","href","setUploadFile","multiple","onChange","e","target","value","Boolean","window","location","hostname","match","modifyFiles","existingFiles","i","INITIAL_STATE","fileProgressReducer","action","status","rootReducer","combineReducers","middleware","thunk","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1c0575d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UploadProgress_wrapper__2evYv\",\"closeButton\":\"UploadProgress_closeButton__15Ye9\"};","const uploadFileTypes = {\r\n  SET_UPLOAD_FILE: 'SET_UPLOAD_FILE',\r\n  SET_UPLOAD_PROGRESS: 'SET_UPLOAD_PROGRESS',\r\n  SUCCESS_UPLOAD_FILE: 'SUCCESS_UPLOAD_FILE',\r\n  FAILURE_UPLOAD_FILE: 'FAILURE_UPLOAD_FILE',\r\n}\r\n\r\nexport default uploadFileTypes\r\n","import axios from 'axios'\r\nimport uploadFileTypes from './uploadFile.types'\r\n\r\nexport const setUploadFile = data => ({\r\n  type: uploadFileTypes.SET_UPLOAD_FILE,\r\n  payload: data,\r\n})\r\n\r\nexport const setUploadProgress = (id, progress) => ({\r\n  type: uploadFileTypes.SET_UPLOAD_PROGRESS,\r\n  payload: {\r\n    id,\r\n    progress,\r\n  },\r\n})\r\n\r\nexport const successUploadFile = id => ({\r\n  type: uploadFileTypes.SUCCESS_UPLOAD_FILE,\r\n  payload: id,\r\n})\r\n\r\nexport const failureUploadFile = id => ({\r\n  type: uploadFileTypes.FAILURE_UPLOAD_FILE,\r\n  payload: id,\r\n})\r\n\r\nexport const uploadFile = files => dispatch => {\r\n  if (files.length) {\r\n    files.forEach(async file => {\r\n      const formPayload = new FormData()\r\n      formPayload.append('file', file.file)\r\n\r\n      try {\r\n        await axios({\r\n          baseURL: 'http://localhost:5000',\r\n          url: '/file',\r\n          method: 'post',\r\n          data: formPayload,\r\n          onUploadProgress: progress => {\r\n            const { loaded, total } = progress\r\n\r\n            const percentageProgress = Math.floor((loaded / total) * 100)\r\n            dispatch(setUploadProgress(file.id, percentageProgress))\r\n          },\r\n        })\r\n        dispatch(successUploadFile(file.id))\r\n      } catch (error) {\r\n        dispatch(failureUploadFile(file.id))\r\n      }\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Styles from './UploadItem.module.css'\r\n\r\nconst UploadItem = props => {\r\n  const { file, progress } = props.file\r\n\r\n  return (\r\n    <div className={Styles.wrapperItem}>\r\n      <div className={Styles.leftSide}>\r\n        <div className={Styles.progressBar}>\r\n          <div style={{ width: `${progress}%` }} />\r\n        </div>\r\n        <label>{file.name}</label>\r\n      </div>\r\n      <span className={Styles.percentage}>{progress}%</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UploadItem\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { size, toArray } from 'lodash'\r\n\r\nimport { uploadFile } from '../../redux/uploadFile/uploadFile.actions'\r\nimport UploadItem from '../UploadItem/UploadItem'\r\nimport Styles from './UploadProgress.module.css'\r\n\r\nconst UploadProgress = props => {\r\n  const { fileProgress, uploadFile } = props\r\n  const uploadedFileAmount = size(fileProgress)\r\n\r\n  useEffect(() => {\r\n    const fileToUpload = toArray(fileProgress).filter(file => file.progress === 0)\r\n    uploadFile(fileToUpload)\r\n  }, [uploadedFileAmount])\r\n\r\n  return uploadedFileAmount > 0 ? (\r\n    <div className={Styles.wrapper}>\r\n      <h4>Uploading File</h4>\r\n      {size(fileProgress)\r\n        ? toArray(fileProgress).map(file => <UploadItem key={file.id} file={file} />)\r\n        : null}\r\n    </div>\r\n  ) : null\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  fileProgress: state.UploadFile.fileProgress,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  uploadFile: files => dispatch(uploadFile(files)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadProgress)\r\n","import React from 'react';\r\nimport \"./header.css\";\r\nimport \"../App.css\"\r\n\r\nconst Header = () => (\r\n\r\n    <header>\r\n        <h1>Upload de arquivos</h1>\r\n    </header>\r\n\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./footer.css\";\r\n\r\nconst Footer = () => (\r\n\r\n    <footer>\r\n        <h1>Desenvolvedores</h1>\r\n        <ul>\r\n        <li><a href=\"https://github.com/JoseCarlos69\">José Carlos</a></li>\r\n        <li><a href=\"https://github.com/RachMor\">Raquel Moreira</a></li>\r\n        <li><a href=\"https://github.com/nicoringa\">Nicolas Moura </a></li>\r\n        <li><a href=\"https://github.com/Mmotta18\">Matheus Motta</a></li>\r\n        <li><a href=\"https://github.com/leoorodr\">Leonardo Rodrigues</a></li>\r\n        <li><a href=\"https://github.com/Thekid666\">João Vitor</a></li>\r\n        </ul>\r\n    </footer>\r\n\r\n);\r\n\r\nexport default Footer;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setUploadFile } from './redux/uploadFile/uploadFile.actions'\r\nimport UploadProgress from './components/UploadProgress/UploadProgress'\r\nimport Header from './components/header'\r\nimport Footer from './components/footer'\r\nimport './App.css'\r\n\r\n\r\nfunction App(props) {\r\n  const handleAttachFIle = e => {\r\n    // could do some validation for the attached file here\r\n    props.setUploadFile(e.target.files)\r\n    e.target.value = '' // to clear the current file\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header/>\r\n        <main>\r\n        <input type=\"file\" multiple onChange={handleAttachFIle} />\r\n      <UploadProgress />\r\n    </main>\r\n    <Footer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setUploadFile: files => dispatch(setUploadFile(files)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// import axios from 'axios'\r\nimport { size } from 'lodash'\r\n\r\nexport const modifyFiles = (existingFiles, files) => {\r\n  let fileToUpload = {}\r\n\r\n  for (let i = 0; i < files.length; i++) {\r\n    const id = size(existingFiles) + i + 1\r\n    // const CancelToken = axios.CancelToken  --> can be used for cancelling upload progress\r\n    // const source = CancelToken.source()\r\n\r\n    fileToUpload = {\r\n      ...fileToUpload,\r\n      [id]: {\r\n        id,\r\n        file: files[i],\r\n        progress: 0,\r\n        // cancelSource: source,\r\n      },\r\n    }\r\n  }\r\n\r\n  return fileToUpload\r\n}\r\n","import uploadFileTypes from './uploadFile.types'\r\nimport { modifyFiles } from './uploadFile.utils'\r\n\r\nconst INITIAL_STATE = {\r\n  fileProgress: {\r\n    // format will be like below\r\n    // 1: {\r\n    //   id: 1,\r\n    //   file,\r\n    //   progress: 0,\r\n    //   cancelSource: source,\r\n    //   status: 0,\r\n    // },\r\n  },\r\n}\r\n\r\nconst fileProgressReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case uploadFileTypes.SET_UPLOAD_FILE:\r\n      return {\r\n        ...state,\r\n        fileProgress: {\r\n          ...state.fileProgress,\r\n          ...modifyFiles(state.fileProgress, action.payload),\r\n        },\r\n      }\r\n\r\n    case uploadFileTypes.SET_UPLOAD_PROGRESS:\r\n      return {\r\n        ...state,\r\n        fileProgress: {\r\n          ...state.fileProgress,\r\n          [action.payload.id]: {\r\n            ...state.fileProgress[action.payload.id],\r\n            progress: action.payload.progress,\r\n          },\r\n        },\r\n      }\r\n\r\n    case uploadFileTypes.SUCCESS_UPLOAD_FILE:\r\n      return {\r\n        ...state,\r\n        fileProgress: {\r\n          ...state.fileProgress,\r\n          [action.payload]: {\r\n            ...state.fileProgress[action.payload],\r\n            status: 1,\r\n          },\r\n        },\r\n      }\r\n\r\n    case uploadFileTypes.FAILURE_UPLOAD_FILE:\r\n      return {\r\n        ...state,\r\n        fileProgress: {\r\n          ...state.fileProgress,\r\n          [action.payload]: {\r\n            ...state.fileProgress[action.payload],\r\n            status: 0,\r\n            progress: 0,\r\n          },\r\n        },\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default fileProgressReducer\r\n","import { combineReducers } from 'redux'\r\nimport UploadFile from './uploadFile/uploadFile.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  UploadFile,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport rootReducer from './redux/root-reducer'\r\n\r\nconst middleware = [thunk]\r\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnchancers(applyMiddleware(...middleware)))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperItem\":\"UploadItem_wrapperItem__2ZEiU\",\"leftSide\":\"UploadItem_leftSide__1CuoW\",\"progressBar\":\"UploadItem_progressBar__3o2hM\",\"percentage\":\"UploadItem_percentage__1SRrb\"};"],"sourceRoot":""}